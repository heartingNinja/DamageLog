using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

    public class SpawnLogBox : MonoBehaviour
    {
        public Queue<string> messageQueue;

        public GameObject chatMessagePrefab;
        public RectTransform chatMessageParent;

        public GameObject playerInteractionPrefab;
        public RectTransform playerInteractionParent;

        public bool DoDestroyChat = false;
        public float destroyChatTime = 0f;
      
       
       public GameObject enemyOne; // for DamageLogOneEnemy
       

        float dmgHead;
        float dmgBody;
        float dmgArm;
      
    
    private void Start()
        {
            messageQueue = new Queue<string>();          
        }

        private void Update()
        {
            CheckNewMessages();
            DamageNumbersLog();
            //DamageLogOneEnemy();


        }

        void CheckNewMessages()
        {
            if (messageQueue.Count > 0)
            {
                foreach (string line in messageQueue)
                {
                    Messenger.Instance.CreateMessage(DoDestroyChat, destroyChatTime,  chatMessagePrefab, chatMessageParent, line, Color.red);
                    Messenger.Instance.CreateMessage(DoDestroyChat, destroyChatTime, playerInteractionPrefab, playerInteractionParent, line, Color.black);
                }

                messageQueue.Dequeue();
            }
        }

        public void CreateMessage()
        {
            messageQueue.Enqueue("Damage");
        }

    void DamageNumbersLog()
    {
    // fail for multi enemy
    //   GameObject[] enemyAll = GameObject.FindGameObjectsWithTag("EnemyForLog");

    //   foreach (GameObject enemy in enemyAll)
    //   {
    //       dmgHead = enemy.GetComponentInChildren<DamageInfo>().totalDamage;
    //        dmgBody = enemy.GetComponentInChildren<DamageInfoBody>().totalDamage;
    //        dmgArm = enemy.GetComponentInChildren<DamageInfoArms>().totalDamage;
    //    }
    // end fail multi enemy

        
     // works for 1 enemy
         GameObject enemyAll = GameObject.FindGameObjectWithTag("EnemyForLog");      
         dmgHead = enemyAll.GetComponentInChildren<DamageInfo>().totalDamage;
         dmgBody = enemyAll.GetComponentInChildren<DamageInfoBody>().totalDamage;
         dmgArm = enemyAll.GetComponentInChildren<DamageInfoArms>().totalDamage;
     // end works for 1 enemy

        dmgHead = Mathf.Round(dmgHead);
        dmgBody = Mathf.Round(dmgBody);
        dmgArm = Mathf.Round(dmgArm);


        if (dmgHead > 1)
        {
            messageQueue.Enqueue(dmgHead.ToString() + " Head");
        }

        if (dmgBody > 1)
        {
            messageQueue.Enqueue(dmgBody.ToString() + " Body");
        }

        if (dmgArm > 1)
        {
            messageQueue.Enqueue(dmgArm.ToString() + " Arm");
        }

    }
        
        void DamageLogOneEnemy() // 1 enemy by public GameObject
        {
        dmgHead = enemyOne.GetComponentInChildren<DamageInfo>().totalDamage;
        dmgBody = enemyOne.GetComponentInChildren<DamageInfoBody>().totalDamage;
        dmgArm = enemyOne.GetComponentInChildren<DamageInfoArms>().totalDamage;

        dmgHead = Mathf.Round(dmgHead);
        dmgBody = Mathf.Round(dmgBody);
        dmgArm = Mathf.Round(dmgArm);

        
        if (dmgHead > 1)
        {
            messageQueue.Enqueue(dmgHead.ToString() + " Head");
        }

        if (dmgBody > 1)
        {
            messageQueue.Enqueue(dmgBody.ToString() + " Body");
        }

        if (dmgArm > 1)
        {
            messageQueue.Enqueue(dmgArm.ToString() + "Arm");
        }

    }
       

    

   }



